setwd("D:/GITHUB/DataScience_R_Lab/Lab/20-31/R -20-30")
#Live Demo
input <- mtcars[,c("am","mpg","hp")]
print(head(input))
#Live Demo
# Get the dataset.
input <- mtcars
# Create the regression model.
result <- aov(mpg~hp*am,data = input)
print(summary(result))
#Live Demo
# Get the dataset.
input <- mtcars
# Create the regression model.
result <- aov(mpg~hp+am,data = input)
print(summary(result))
#Live Demo
# Get the dataset.
input <- mtcars
# Create the regression models.
result1 <- aov(mpg~hp*am,data = input)
result2 <- aov(mpg~hp+am,data = input)
# Compare the two models.
print(anova(result1,result2))
print(input)
result1 <- aov(mpg~hp*cyl,data = input)
result2 <- aov(mpg~hp+cyl,data = input)
# Compare the two models.
print(anova(result1,result2))
is.circular_prime <- function(n, primes) {
digits <- as.numeric(strsplit(as.character(n), "")[[1]])
rotations <- vector()
for (i in 1:length(digits)) {
digits <- c(tail(digits, -1), head(digits, 1))
rotated <- as.numeric(paste0(digits, collapse = ""))
if (!rotated %in% primes)
return(FALSE)
rotations <- c(rotations, rotated)
}
return(rotations)
}
count_and_print_circular_primes <- function(num) {
primes <- esieve(num)
circular_primes <- numeric()
for (i in primes) {
circular <- is.circular_prime(i, primes)
if (!identical(circular, FALSE)) {
circular_primes <- c(circular_primes, circular)
}
}
cat("Circular Primes:", circular_primes, "\n")
cat("Count of Circular Primes:", length(circular_primes), "\n")
}
# Measure the execution time and print the circular primes
system.time({
count_and_print_circular_primes(10000)
})
is.circular_prime <- function(n, primes) {
digits <- as.numeric(strsplit(as.character(n), "")[[1]])
rotations <- vector()
for (i in 1:length(digits)) {
digits <- c(tail(digits, -1), head(digits, 1))
rotated <- as.numeric(paste0(digits, collapse = ""))
if (!rotated %in% primes)
return(FALSE)
rotations <- c(rotations, rotated)
}
return(rotations)
}
count_and_print_circular_primes <- function(num) {
primes <- esieve(num)
circular_primes <- numeric()
for (i in primes) {
circular <- is.circular_prime(i, primes)
if (!identical(circular, FALSE)) {
circular_primes <- c(circular_primes, circular)
}
}
cat("Circular Primes:", circular_primes, "\n")
cat("Count of Circular Primes:", length(circular_primes), "\n")
}
system.time({
count_and_print_circular_primes(10000)
})
# Function to check if a number is prime
is_prime <- function(n) {
if (n < 2) return(FALSE)
for (i in 2:sqrt(n)) {
if (n %% i == 0) return(FALSE)
}
TRUE
}
# Function to generate circular primes up to a given limit
generate_circular_primes <- function(limit) {
circular_primes <- c()
# Function to rotate digits of a number
rotate <- function(x) {
digits <- as.character(x)
rotations <- sapply(1:(nchar(x)-1), function(i) paste0(c(tail(digits, -i), head(digits, i)), collapse = ""))
as.numeric(c(x, rotations))
}
# Loop through numbers up to the limit
for (num in 2:limit) {
# Check if the number is prime
if (is_prime(num)) {
# Check if all circular permutations are prime
circular <- all(sapply(rotate(num), is_prime))
if (circular) {
circular_primes <- c(circular_primes, num)
}
}
}
circular_primes
}
# Set the limit for circular primes
limit <- 100000
# Generate circular primes
circular_primes <- generate_circular_primes(limit)
# Function to check if a number is prime
is_prime <- function(n) {
if (n < 2) return(FALSE)
for (i in 2:sqrt(n)) {
if (n %% i == 0) return(FALSE)
}
TRUE
}
# Function to generate circular primes up to a given limit
generate_circular_primes <- function(limit) {
circular_primes <- c()
# Function to rotate digits of a number
rotate <- function(x) {
digits <- as.character(x)
rotations <- sapply(1:(nchar(x)-1), function(i) paste0(c(tail(digits, -i), head(digits, i)), collapse = ""))
as.numeric(c(x, rotations))
}
# Loop through numbers up to the limit
for (num in 2:limit) {
# Check if the number is prime
if (is_prime(num)) {
# Check if all circular permutations are prime
circular <- all(sapply(rotate(num), is_prime))
if (circular) {
circular_primes <- c(circular_primes, num)
}
}
}
circular_primes
}
# Set the limit for circular primes
limit <- 100000
# Generate circular primes
circular_primes <- generate_circular_primes(limit)
# Function to check if a number is prime
is_prime <- function(n) {
if (is.na(n) || n < 2) return(FALSE)
for (i in 2:sqrt(n)) {
if (n %% i == 0) return(FALSE)
}
TRUE
}
# Function to generate circular primes up to a given limit
generate_circular_primes <- function(limit) {
circular_primes <- c()
# Function to rotate digits of a number
rotate <- function(x) {
digits <- as.character(x)
rotations <- sapply(1:(nchar(x)-1), function(i) paste0(c(tail(digits, -i), head(digits, i)), collapse = ""))
as.numeric(c(x, rotations))
}
# Loop through numbers up to the limit
for (num in 2:limit) {
# Check if the number is prime
if (is_prime(num)) {
# Check if all circular permutations are prime
circular <- all(sapply(rotate(num), is_prime))
if (circular) {
circular_primes <- c(circular_primes, num)
}
}
}
circular_primes
}
# Set the limit for circular primes
limit <- 100000
# Generate circular primes
circular_primes <- generate_circular_primes(limit)
# Print the circular primes
cat("Circular Primes up to", limit, ":", circular_primes, "\n")
# Function to check if a number is prime
is_prime <- function(n) {
if (is.na(n) || n < 2) return(FALSE)
for (i in 2:sqrt(n)) {
if (n %% i == 0) return(FALSE)
}
TRUE
}
# Function to generate circular primes up to a given limit
generate_circular_primes <- function(limit) {
circular_primes <- c()
# Function to rotate digits of a number
rotate <- function(x) {
digits <- as.character(x)
rotations <- sapply(1:(nchar(x)-1), function(i) paste0(c(tail(digits, -i), head(digits, i)), collapse = ""))
as.numeric(c(x, rotations))
}
# Loop through numbers up to the limit
for (num in 2:limit) {
# Check if the number is prime
if (is_prime(num)) {
# Check if all circular permutations are prime
circular <- all(sapply(rotate(num), is_prime))
if (circular) {
circular_primes <- c(circular_primes, num)
}
}
}
circular_primes
}
# Set the limit for circular primes
limit <- 100000
# Generate circular primes
circular_primes <- generate_circular_primes(limit)
# Print the count and circular primes
cat("Number of Circular Primes up to", limit, ":", length(circular_primes), "\n")
cat("Circular Primes:", circular_primes, "\n")
cat("Number of Circular Primes up to", limit, ":", length(circular_primes), "\n")
# Function to check if a set of numbers is a Pythagorean triplet
is_pythagorean_triplet <- function(a, b, c) {
return(a^2 + b^2 == c^2)
}
# Function to find the Pythagorean triplet for a given sum
find_pythagorean_triplet <- function(sum) {
for (a in 1:(sum/3)) {
for (b in (a+1):(sum/2)) {
c <- sum - a - b
if (is_pythagorean_triplet(a, b, c)) {
return(c(a, b, c))
}
}
}
return(NULL)
}
# Set the desired sum
target_sum <- 1000
# Find the Pythagorean triplet
triplet <- find_pythagorean_triplet(target_sum)
# Calculate the product abc
product_abc <- prod(triplet)
# Print the result
cat("Pythagorean Triplet:", triplet, "\n")
cat("Product abc:", product_abc, "\n")
# Generate a sample time series data
set.seed(123)
ts_data <- ts(rnorm(100), start = 1)
# Calculate the 5-period moving average
ma <- filter(ts_data, rep(1/5, 5), sides = 2)
# Plot the original data and moving average
plot(ts_data, col = "blue", type = "l", lwd = 2, main = "Moving Average Example")
lines(ma, col = "red", lwd = 2)
legend("topright", legend = c("Original Data", "5-Period Moving Average"), col = c("blue", "red"), lwd = 2)
#5. Time Series Analysis using Weather Temperature Data:
# Install necessary packages
install.packages("datasets")
library(datasets)
# Access the AirPassengers dataset
data("AirPassengers")
# Plot the time series of monthly air passenger counts
plot(AirPassengers, type = "l", col = "blue", lwd = 2, main = "Air Passenger Counts over Time")
install.packages("datasets")
install.packages("datasets")
library(quantmod)
# Get stock data (e.g., Apple Inc.)
getSymbols("AAPL", src = "yahoo", from = "2022-01-01", to = Sys.Date())
# Plot closing prices
plot(Cl(AAPL), type = "l", col = "blue", lwd = 2, main = "Stock Data - Closing Prices")
set.seed(123)
ts_data <- ts(arima.sim(model = list(order = c(1,1,1)), n = 100))
#3. ARIMA Model:
# Generate a sample time series data
set.seed(123)
ts_data <- ts(arima.sim(model = list(order = c(1,1,1)), n = 100))
set.seed(123)
ts_data <- arima.sim(model = list(ar = 0.7, ma = -0.5), n = 100)
# Fit an ARIMA(1,1,1) model
arima_model <- arima(ts_data, order = c(1, 1, 1))
# Plot the original data and ARIMA(1,1,1) model
plot(ts_data, col = "blue", type = "l", lwd = 2, main = "ARIMA Model Example")
lines(fitted(arima_model), col = "red", lwd = 2)
legend("topright", legend = c("Original Data", "ARIMA(1,1,1) Model"), col = c("blue", "red"), lwd = 2)
# Hypothetical dataset
data <- data.frame(
Sno = 1:10,
Regno = c(101, 102, 103, 104, 105, 106, 107, 108, 109, 110),
Sattvic = c(5, 3, 4, 2, 5, 4, 3, 5, 2, 4),
Rajasic = c(4, 2, 3, 5, 3, 4, 5, 3, 5, 2),
Tamasic = c(2, 5, 3, 4, 4, 2, 3, 4, 2, 5),
Number = c(85, 90, 78, 92, 88, 76, 89, 93, 80, 87),
Letter = c(70, 85, 82, 76, 90, 88, 79, 84, 92, 81)
)
# Basic Scatter Plot
plot(data$Sattvic, data$Rajasic, main = "Scatter Plot", xlab = "Sattvic", ylab = "Rajasic")
# Basic Bar Plot
barplot(data$Tamasic, names.arg = data$Regno, col = "skyblue", main = "Bar Plot", xlab = "Regno", ylab = "Tamasic")
# Basic Line Plot
plot(data$Sno, data$Number, type = "l", col = "red", main = "Line Plot", xlab = "Sno", ylab = "Number")
# Basic Boxplot
boxplot(data$Letter, main = "Boxplot", ylab = "Letter")
# Basic Histogram
hist(data$Number, col = "lightblue", main = "Histogram", xlab = "Number", ylab = "Frequency")
# Basic Pie Chart
pie(c(mean(data$Sattvic), mean(data$Rajasic), mean(data$Tamasic)),
labels = c("Sattvic", "Rajasic", "Tamasic"),
main = "Pie Chart",
col = c("red", "green", "blue"))
# Basic Bar Plot
barplot(data$Tamasic, names.arg = data$Regno, col = "skyblue", main = "Bar Plot", xlab = "Regno", ylab = "Tamasic")
# Basic Line Plot
plot(data$Sno, data$Number, type = "l", col = "red", main = "Line Plot", xlab = "Sno", ylab = "Number")
# Basic Boxplot
boxplot(data$Letter, main = "Boxplot", ylab = "Letter")
# Basic Histogram
hist(data$Number, col = "lightblue", main = "Histogram", xlab = "Number", ylab = "Frequency")
# Read the data from guna.csv
data <- read.csv("guna1.csv")
# Basic Scatter Plot
plot(data$Sattvic, data$Rajasic, main = "Scatter Plot", xlab = "Sattvic", ylab = "Rajasic")
# Basic Bar Plot
barplot(data$Tamasic, names.arg = data$Regno, col = "skyblue", main = "Bar Plot", xlab = "Regno", ylab = "Tamasic")
# Basic Line Plot
plot(data$Sno, data$Number, type = "l", col = "red", main = "Line Plot", xlab = "Sno", ylab = "Number")
# Basic Boxplot
boxplot(data$Letter, main = "Boxplot", ylab = "Letter")
# Basic Histogram
hist(data$Number, col = "lightblue", main = "Histogram", xlab = "Number", ylab = "Frequency")
# Basic Pie Chart
pie(c(mean(data$Sattvic), mean(data$Rajasic), mean(data$Tamasic)),
labels = c("Sattvic", "Rajasic", "Tamasic"),
main = "Pie Chart",
col = c("red", "green", "blue"))
# Basic Scatter Plot Matrix
pairs(data[, c("Sattvic", "Rajasic", "Tamasic", "Number", "Letter")],
main = "Scatter Plot Matrix")
# Basic Bar Plots for selected columns
par(mfrow = c(2, 2))
barplot(data$Sattvic, names.arg = data$Regno, col = "skyblue", main = "Sattvic", xlab = "Regno", ylab = "Sattvic")
barplot(data$Rajasic, names.arg = data$Regno, col = "lightgreen", main = "Rajasic", xlab = "Regno", ylab = "Rajasic")
barplot(data$Tamasic, names.arg = data$Regno, col = "coral", main = "Tamasic", xlab = "Regno", ylab = "Tamasic")
barplot(data$Number, names.arg = data$Regno, col = "lightpink", main = "Number", xlab = "Regno", ylab = "Number")
par(mfrow = c(1, 1))
# Basic Line Plots for selected columns
plot(data$Sno, data$Number, type = "l", col = "red", main = "Line Plot", xlab = "Sno", ylab = "Number")
# Basic Boxplot for selected columns
boxplot(data[, c("Sattvic", "Rajasic", "Tamasic")], main = "Boxplot")
# Basic Histogram for selected columns
hist(data$Number, col = "lightblue", main = "Histogram", xlab = "Number", ylab = "Frequency")
# Basic Pie Chart for selected columns
pie(c(mean(data$Sattvic), mean(data$Rajasic), mean(data$Tamasic)),
labels = c("Sattvic", "Rajasic", "Tamasic"),
main = "Pie Chart",
col = c("red", "green", "blue"))
# Comparison of Attitude and Apptitude
attitude <- data$Attitude
apptitude <- data$Apptitude
# Calculate Mean and Standard Deviation
mean_attitude <- mean(attitude)
sd_attitude <- sd(attitude)
mean_apptitude <- mean(apptitude)
sd_apptitude <- sd(apptitude)
cat("Attitude - Mean:", mean_attitude, "SD:", sd_attitude, "\n")
cat("Apptitude - Mean:", mean_apptitude, "SD:", sd_apptitude, "\n")
# Create a Scatter Plot
plot(attitude, apptitude, main = "Scatter Plot: Attitude vs. Apptitude", xlab = "Attitude", ylab = "Apptitude", col = "blue")
# Create a Boxplot for Attitude and Apptitude
boxplot(attitude, apptitude, names = c("Attitude", "Apptitude"), main = "Boxplot: Attitude vs. Apptitude", col = c("orange", "green"))
# Create a Histogram for Attitude and Apptitude
par(mfrow = c(1, 2))
hist(attitude, col = "lightblue", main = "Histogram: Attitude", xlab = "Attitude", ylab = "Frequency")
hist(apptitude, col = "lightgreen", main = "Histogram: Apptitude", xlab = "Apptitude", ylab = "Frequency")
par(mfrow = c(1, 1))
# Perform a t-test for Attitude and Apptitude
t_test_result <- t.test(attitude, apptitude)
cat("\nT-Test Result:\n", t_test_result, "\n")
# Perform a t-test for Attitude and Apptitude
t_test_result <- t.test(attitude, apptitude)
cat("\nT-Test Result:\n", t_test_result, "\n")
# Basic Summary Statistics
summary(data)
# Correlation Matrix
cor_matrix <- cor(data[, c("Attitude", "Apptitude", "Sattvic", "Rajasic", "Tamasic")])
print("Correlation Matrix:")
print(cor_matrix)
# Pairwise Scatter Plots
pairs(data[, c("Attitude", "Apptitude", "Sattvic", "Rajasic", "Tamasic")], main = "Pairwise Scatter Plots")
# Hypothesis Testing (ANOVA) for Attitude and Apptitude based on Gunas
anova_result <- aov(Attitude ~ Sattvic + Rajasic + Tamasic + Apptitude, data = data)
print("ANOVA Result:")
print(anova_result)
# Tukey's HSD Test for post-hoc analysis
tukey_result <- TukeyHSD(anova_result)
# Create a Boxplot for Attitude based on Guna Types
boxplot(Attitude ~ gunas, data = data, main = "Boxplot: Attitude by Guna Types", col = c("orange", "green", "blue"))
# Compare Gender-wise Attitude using Violin Plot
library(ggplot2)
ggplot(data, aes(x = Gender, y = Attitude, fill = Gender)) +
geom_violin() +
labs(title = "Violin Plot: Attitude by Gender", x = "Gender", y = "Attitude") +
theme_minimal()
# Additional Plots and Analyses can be added based on specific requirements
# Compare Gender-wise Attitude using Violin Plot
ggplot(data, aes(x = Gender, y = Attitude, fill = Gender)) +
geom_violin() +
labs(title = "Violin Plot: Attitude by Gender", x = "Gender", y = "Attitude") +
theme_minimal()
# Bar Plot for Apptitude by Guna Types
ggplot(data, aes(x = gunas, y = Apptitude, fill = gunas)) +
geom_bar(stat = "identity") +
labs(title = "Bar Plot: Apptitude by Guna Types", x = "Guna Types", y = "Apptitude") +
theme_minimal()
# Scatter Plot for Number vs. Letter
ggplot(data, aes(x = Number, y = Letter, color = Gender)) +
geom_point() +
labs(title = "Scatter Plot: Number vs. Letter", x = "Number", y = "Letter") +
theme_minimal()
# Histogram for Sattvic
ggplot(data, aes(x = Sattvic, fill = Gender)) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.7) +
labs(title = "Histogram: Sattvic by Gender", x = "Sattvic", y = "Frequency") +
theme_minimal()
# Create a Boxplot for Attitude based on Guna Types
boxplot(Attitude ~ gunas, data = data, main = "Boxplot: Attitude by Guna Types", col = c("orange", "green", "blue"))
# Compare Gender-wise Attitude using Violin Plot
plot(data$Gender, data$Attitude, main = "Violin Plot: Attitude by Gender", xlab = "Gender", ylab = "Attitude", col = data$Gender)
# Bar Plot for Apptitude by Guna Types
barplot(data$Apptitude, beside = TRUE, names.arg = data$gunas, col = c("orange", "green", "blue"), main = "Bar Plot: Apptitude by Guna Types", xlab = "Guna Types", ylab = "Apptitude")
# Scatter Plot for Number vs. Letter
plot(data$Number, data$Letter, col = data$Gender, pch = 16, main = "Scatter Plot: Number vs. Letter", xlab = "Number", ylab = "Letter")
# Histogram for Sattvic
hist(data$Sattvic[data$Gender == "Male"], col = "lightblue", main = "Histogram: Sattvic for Males", xlab = "Sattvic", ylab = "Frequency", xlim = c(1, 5), ylim = c(0, 4), breaks = seq(1, 5, by = 1), add = FALSE)
hist(data$Sattvic[data$Gender == "Female"], col = "lightcoral", main = "Histogram: Sattvic for Females", xlab = "Sattvic", ylab = "Frequency", xlim = c(1, 5), ylim = c(0, 4), breaks = seq(1, 5, by = 1), add = TRUE)
legend("topright", legend = c("Male", "Female"), fill = c("lightblue", "lightcoral"))
