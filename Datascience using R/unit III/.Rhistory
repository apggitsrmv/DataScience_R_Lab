}
}
a <- "Hello"
b <- 'How'
c <- "are you? "
print(paste(a,b,c))
print(paste(a,b,c, sep = "-"))
print(paste(a,b,c, sep = "", collapse = ""))
result <- format(23.123456789, digits = 7)
print(result)
# Display numbers in scientific notation.
result <- format(c(623.2334, 131.14521), scientific = TRUE)
print(result)
result <- format(23.47, nsmall = 4)
print(result)
result <- format(6)
print(result)
# Numbers are padded with blank in the beginning for width.
result <- format("Sri Ramakrishna", width = 20)
print(result)
result<-format("12345",width=10)
print(result)
# Left justify strings.
result <- format("Hello", width = 8, justify = "l")
print(result)
result <- format("Hello", width = 8, justify = "r")
print(result)
# Justfy string with center.
result <- format("Hello", width = 8, justify = "c")
print(result)
result <- nchar("hello  how are you")
print(result)
# Changing to Upper case.
result <- toupper("Changing To Upper")
print(result)
# Changing to lower case.
result <- tolower("Changing To Lower")
print(result)
result <- substring("Extract", 2, 6)
print(result)
result<-substring("hello how are you",1,5)
print(result)
result<-substring("hello how are you",7,9)
print(result)
a<-c(1,2,3)
print(a)
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
print(list_data[3])
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3))
print(list_data)
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list")
# Access the first element of the list.
print(list_data[1])
print(list_data$A_Matrix)
print(list_data$`1st Quarter`)
list_data[4] <- "New element"
print(list_data[4])
print(list_data)
print(list_data$String1)
list_data[4] <- NULL
print(list_data)
a <- 'Start and end with single quote'
print(a)
b <- "Start and end with double quotes"
print(b)
c <- "single quote ' in between double quotes"
print(c)
e <- 'Mixed quotes"
print(e)
c <- "single quote ' in ' between double quotes"
print(c)
a <- "Hello"
b <- 'How'
c <- "are you? "
print(paste(a,b,c))
print(paste(a,b,c, sep = "-"))
print(paste(a,b,c, sep = "", collapse = ""))
# Total number of digits displayed. Last digit rounded off.
result <- format(23.123456789, digits = 7)
print(result)
result <- format(c(623.2334, 131.14521), scientific = TRUE)
print(result)
result <- format(23.47, nsmall = 4)
print(result)
result <- format(23.47, nsmall = 5)
print(result)
result <- format(6)
print(result)
result <- format("Sri Ramakrishna", width = 20)
print(result)
result<-format("12345",width=10)
print(result)
# Left justify strings.
result <- format("Hello", width = 8, justify = "l")
print(result)
result <- format("Hello", width = 8, justify = "r")
print(result)
# Justfy string with center.
result <- format("Hello", width = 8, justify = "c")
print(result)
result <- nchar("hello  how are you")
print(result)
result <- toupper("Changing To Upper")
print(result)
result <- tolower("Changing To Lower")
print(result)
result <- substring("Extract", 2, 6)
print(result)
result<-substring("hello how are you",1,5)
print(result)
result<-substring("hello how are you",7,9)
print(result)
a<-c(1,2,3)
print(a)
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
print(list_data[3])
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3))
print(list_data)
# Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list")
# Show the list.
print(list_data)
print(list_data[1])
print(list_data[3])
print(list_data$A_Matrix)
print(list_data$A_Matrix)
print(list_data$`1st Quarter`)
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3))
# Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list","String1")
# Add element at the end of the list.
list_data[4] <- "New element"
print(list_data[4])
print(list_data)
print(list_data$String1)
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list","String1")
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3))
# Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list","String1")
# Add element at the end of the list.
list_data[4] <- "New element"
list_data[4] <- "New element"
print(list_data[4])
print(list_data)
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list","String1")
print(list_data$String1)
list_data[4] <- NULL
# Print the 4th Element.
print(list_data)
list_data[3] <- list(list("green",12.3,"updated element"))
print(list_data[3])
print(list_data)
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3),c("Apr","May","Jun"))
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list","2nd Quarter")
print(list_data)
list1 <- list(1,2,3)
list2 <- list("Sun","Mon","Tue")
merged.list <- c(list1,list2)
list3<-c(list1,list2)
print(list3)
list1<-list(1,2,3)
list2<-list(3,4,5)
list3<-list1+list2
print(list3)
list1<-list(1,2,3)
list2<-list(3,4,5)
list3<-list1+list2
print(list3)
list1<-list(1,2,3)
list2<-list(3,4,5)
list4<-list1+list2
print(list4)
vector1<-c(1,2,3)
vector2<-c(3,4,5)
vector3<-vector1+vector2
print(vector3)
list1 <- list(1:5)
print(list1)
list2 <-list(10:14)
print(list2)
#list elements cannot be applied arthimetical operations
print(list1+list2)
v1 <- unlist(list1)
v2 <- unlist(list2)
print(v1)
print(v2)
result <- v1+v2
print(result)
name.age<-data.frame(name=c("Govind","Kumar","Sasi"), age=c(32,30,30))
print(name.age)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)
# Create the data frame.
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Get the structure of the data frame.
str(emp.data)
print(summary(emp.data))
result <- data.frame(emp.data$emp_name,emp.data$salary)
print(result)
result <- data.frame(emp.data$emp.name,emp.data$salary,emp.data$emp_id)
print(result)
result1 <- data.frame(emp.data$emp.name,emp.data$salary,emp.data$emp_id)
print(result1)
result1 <- data.frame(emp.data$emp.name,emp.data$salary)
print(result1)
result <- data.frame(emp.data$emp_name,emp.data$salary)
print(result)
result1 <- data.frame(emp.data$emp_name,emp.data$salary)
print(result1)
result1 <- data.frame(emp.data$emp_name,emp.data$salary,emp.data$emp_id)
print(result1)
result<-emp.data[1:2,1:2]
print(result)
result<-emp.data[,1:2]
print(result)
result<-emp.data[2:3,1:3]
print(result)
result<-emp.data[2,]
print(result)
result<-emp.data[,3]
print(result)
result <- emp.data[c(3,5),c(2,4)]
print(result)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Add the "dept" coulmn.
emp.data$dept <- c("IT","Operations","IT","HR","Finance")
v <- emp.data
print(v)
str(v)
summary(v)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
dept = c("IT","Operations","IT","HR","Finance"),
stringsAsFactors = FALSE
)
# Create the second data frame
emp.newdata <- 	data.frame(
emp_id = c (6:8),
emp_name = c("Rasmi","Pranab","Tusar"),
salary = c(578.0,722.5,632.8),
start_date = as.Date(c("2013-05-21","2013-07-30","2014-06-17")),
dept = c("IT","Operations","Fianance"),
stringsAsFactors = FALSE
)
# Bind the two data frames.
emp.finaldata <- rbind(emp.data,emp.newdata)
print(emp.finaldata)
print(seq(32,44))
print(sum(41:68))
print(mean(25:82))
print(max(c(12,25,13,8)))
new.function <- function(a) {
for(i in 1:a) {
b <- i^2
print(paste(i,b))
}
}
new.function(8)
new.function <- function() {
for(i in 1:5) {
print(i^2)
}
}
#---------------------------------------
# Call the function without supplying an argument.
#----------------------------------------------
new.function()
new.function <- function(a,b,c) {
result <- a * b + c
print(result)
}
# Call the function by position of arguments.
new.function(5,11,3)
new.function(5,3,11)
new.function(a = 5, c = 3, b =11)
new.function <- function(a = 3, b = 6) {
result <- a * b
print(result)
}
# Call the function without giving any argument.
new.function()
new.function(9,5)
new.function <- function(a, b=2) {
print(a^2)
print(a)
print(b)
}
# Evaluate the function without supplying one of the arguments.
new.function(6)
new.function(5,3)
View(c1)
x = c(186, 176, 158, 180, 186, 168, 168, 164, 178, 170, 189, 195, 172,
187, 180, 186, 185, 168, 179, 178, 183, 179, 170, 175, 186, 159,
161, 178, 175, 185, 175, 162, 173, 172, 177, 175, 172, 177, 180)
y <- x
plot(x,y)
k=(x-mean(x))*(x-mean(x))/(2*sd(x)*sd(x))
k1=exp(-k)
k2=1/sqrt(2*3.14*sd(x)*sd(x))
k3=k2*k1
plot(x,k3)
y<-dnorm(x,mean(x),sd(x))
plot(x,y)
setwd("E:/MCA/Unit iv")
winedata<-read.csv("winequality-red.csv")
head(winedata)
summary(winedata)
x<-winedata$density
x<-winedata$fixed.acidity
y<-dnorm(x,mean(x),sd(x))
plot(x,y)
setwd("E:/MCA/unit III")
guna<-read.csv("guna1.csv")
head(guna)
summary(guna)
x<-guna$Attitude
print(x)
print(mean(guna$Attitude))
print(sd(guna$Attitude))
y<-dnorm(guna$Attitude,mean=mean(guna$Attitude),sd=sd(guna$Attitude))
plot(x,y)
x<-guna$Apptitude
print(x)
print(mean(guna$Apptitude))
print(sd(guna$Apptitude))
y<-dnorm(guna$Apptitude,mean=mean(guna$Apptitude),sd=sd(guna$Apptitude))
plot(x,y)
x<-guna$Att.Value
print(x)
print(mean(guna$Att.Value))
print(sd(guna$Att.Value))
y<-dnorm(guna$Att.Value,mean=mean(guna$Att.Value),sd=sd(guna$Att.Value))
plot(x,y)
x<-3
y<-dbinom(x,10,0.5)
print(y)
x<-0
y<-dbinom(x,4,0.1)
print(y)
x<-2
y<-dbinom(x,10,0.1)
print(y)
x<-seq(0,10,0.001)
print(x)
y<-dbinom(x,10,0.1)
plot(x,y)
x<-seq(0,10,0.01)
print(x)
y<-dbinom(x,10,0.1)
plot(x,y)
x<-seq(0,4,0.1)
x<-4
y<-pbinom(x,4,0.1)
print(y)
plot(x,y)
y1<-0
x<-0
y<-dbinom(x,4,0.1)
y1=y1+y
x<-1
y<-dbinom(x,4,0.1)
y1=y1+y
x<-2
y<-dbinom(x,4,0.1)
y1=y1+y
print(y1)
x<-2
y<-pbinom(x,4,0.1)
print(y)
z<-1-y
print(z)
#to find the probability of getting defective lies between 2 and 3
x1<-2
y1<-pbinom(x1,4,0.1)
print(y1)
x2<-3
y2<-pbinom(x2,4,0.1)
print(y2)
z=y2-y1
print(z)
x<-1
y<-dbinom(x,2,0.5)
print(y)
#probability of getting 2 heads from tossing of 2 heads
x<-2
y<-dbinom(x,2,0.5)
print(y)
#probability of getting 1 head or greater from tossing of 2 heads
x<-1
y<-pbinom(x,2,0.5)
print(y)
x<-0
y<-pbinom(x,2,0.5)
print(y)
x<-1
y<-qbinom(x,2,0.5)
print(y)
x<-seq(0,51,0.5)
y<-dbinom(x,51,0.5)
plot(x,y)
#probability of getting 26 heads
x<-26
y<-dbinom(x,51,0.5)
print(y)
x<-seq(26,51,0.5)
y <- pbinom(x,51,0.5)
print(x)
plot(x,y)
y<-1-pbinom(x,51,0.5)
x<-seq(0,25,0.5)
print(y)
plot(x,y)
#2nd method
x<-seq(0,25,0.5)
y<-pbinom(x,25,0.5)
plot(x,y)
x <- qbinom(0.25,51,1/2)
print(x)
x <- rbinom(8,150,.4)
print(x)
print(dbinom(0, size=12, prob=0.2) +
+ dbinom(1, size=12, prob=0.2) +
+ dbinom(2, size=12, prob=0.2) +
+ dbinom(3, size=12, prob=0.2) +
+ dbinom(4, size=12, prob=0.2))
print(pbinom(4,12,0.2))
sample.range <- 50:150
iq.mean <- 100
iq.sd <- 15
iq.dist <- dnorm(sample.range, mean = iq.mean, sd = iq.sd)
iq.df <- data.frame("IQ" = sample.range, "Density" = iq.dist)
library(ggplot2)
ggplot(iq.df, aes(x = IQ, y = Density)) + geom_point()
library(ggplot2)
ggplot(iq.df, aes(x = IQ, y = Density)) + geom_point()
install.packages("ggplot2")
sample.range <- 50:150
iq.mean <- 100
iq.sd <- 15
iq.dist <- dnorm(sample.range, mean = iq.mean, sd = iq.sd)
iq.df <- data.frame("IQ" = sample.range, "Density" = iq.dist)
library(ggplot2)
ggplot(iq.df, aes(x = IQ, y = Density)) + geom_point()
library(ggplot2)
ggplot(iq.df, aes(x = IQ, y = Density)) + geom_point()
pp <- function(x) {
print(paste0(round(x * 100, 3), "%"))
}
# likelihood of IQ == 140?
pp(iq.df$Density[iq.df$IQ == 140])
x <- seq(0, 1, by = 0.02)
# Choose the mean as 2 and standard deviation as 3.
y <- qnorm(x, mean = 2, sd = 1)
y<-qnorm(x,mean(x),sd(x))
plot(x,y)
y<-pnorm(x,mean=2,sd=1)
plot(x,y)
y<-dnorm(x,mean=2,sd=1)
y<-dnorm(x,mean(x),sd(x))
plot(x,y)
y<-pnorm(x,mean(x),sd(x))
plot(x,y)
y<-qnorm(x,mean(x),sd(x))
plot(x,y)
x<-rnorm(50000)
y<-dnorm(x,mean(x),sd(x))
plot(x,y)
x<-rnorm(50000)
y<-dnorm(x,mean(x),sd(x))
plot(x,y)
x<-rnorm(50000)
y<-dnorm(x,mean(x),sd(x))
plot(x,y)
install.packages("survival")
install.packages("survival")
install.packages("survival")
library("survival")
print(head(pbc))
print(pbc)
