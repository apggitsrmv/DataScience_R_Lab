print(i)
}
v <- LETTERS[1:26]
for ( i in v) {
print(i)
}
v <- LETTERS[1:26]
for ( i in v) {
print(i)
}
u<-c(1:10)
for(i in u)
{
print(v[i])
}
v<-c(2,4,5,6,7,8,9,10,12,14)
u<-c(1:10)
for(i in u)
{
print(v[i])
}
for (i in u)
{
#print(v[i])
if ((v[i]%%2)==0)
{
print(paste("Even",v[i]))
}
else{
print(paste("Odd",v[i]))
}
}
print("a=",2)
print(paste("a=",2))
num = as.integer(readline(prompt="Enter a number: "))
if((num %% 2) == 0) {
print(paste(num,"is Even"))
} else {
print(paste(num,"is Odd"))
}
print(i*j*k)
print(y)
}
print(i,j,k)
for i in c(1:100)
{
for j in c(1:100)
{
for k in c(1:100)
{
if (i<j) & (j<k)
{
if ((i+j+k)==1000)
{
c=i*i+j*j
if (c==k*k)
{
y=i*j*k
print(i,j,k)
print(y)
}
}
}
}
}
}
if ((i<j) & (j<k))
{
y=i*j*k
print(i,j,k)
print(y)
}
for (k in c(1:10))
{
print(i,j,k)
if ((i<j) & (j<k))
{
if ((i+j+k)==1000)
{
c=i*i+j*j
if (c==k*k)
{
y=i*j*k
print(i,j,k)
print(y)
}
}
}
}
{
for (j in c(1:10))
{
for (k in c(1:10))
{
print(i,j,k)
}
}
}
k=1:10
k=c(1:10)
i=c(1:10)
j=c(1:10)
k=c(1:10)
for (i in c(1:10))
{
for (j in c(1:10))
{
for (k in c(1:10))
{
print(i,j,k)
}
}
}
i=c(1:10)
j=c(1:10)
k=c(1:10)
for (i in c(1:10))
{
for (j in c(1:10))
{
for (k in c(1:10))
{
print(paste(i,j,k))
}
}
}
a <- "Hello"
b <- 'How'
c <- "are you? "
print(paste(a,b,c))
print(paste(a,b,c, sep = "-"))
print(paste(a,b,c, sep = "", collapse = ""))
result <- format(23.123456789, digits = 7)
print(result)
# Display numbers in scientific notation.
result <- format(c(623.2334, 131.14521), scientific = TRUE)
print(result)
result <- format(23.47, nsmall = 4)
print(result)
result <- format(6)
print(result)
# Numbers are padded with blank in the beginning for width.
result <- format("Sri Ramakrishna", width = 20)
print(result)
result<-format("12345",width=10)
print(result)
# Left justify strings.
result <- format("Hello", width = 8, justify = "l")
print(result)
result <- format("Hello", width = 8, justify = "r")
print(result)
# Justfy string with center.
result <- format("Hello", width = 8, justify = "c")
print(result)
result <- nchar("hello  how are you")
print(result)
# Changing to Upper case.
result <- toupper("Changing To Upper")
print(result)
# Changing to lower case.
result <- tolower("Changing To Lower")
print(result)
result <- substring("Extract", 2, 6)
print(result)
result<-substring("hello how are you",1,5)
print(result)
result<-substring("hello how are you",7,9)
print(result)
a<-c(1,2,3)
print(a)
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
print(list_data[3])
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3))
print(list_data)
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list")
# Access the first element of the list.
print(list_data[1])
print(list_data$A_Matrix)
print(list_data$`1st Quarter`)
list_data[4] <- "New element"
print(list_data[4])
print(list_data)
print(list_data$String1)
list_data[4] <- NULL
print(list_data)
a <- 'Start and end with single quote'
print(a)
b <- "Start and end with double quotes"
print(b)
c <- "single quote ' in between double quotes"
print(c)
e <- 'Mixed quotes"
print(e)
c <- "single quote ' in ' between double quotes"
print(c)
a <- "Hello"
b <- 'How'
c <- "are you? "
print(paste(a,b,c))
print(paste(a,b,c, sep = "-"))
print(paste(a,b,c, sep = "", collapse = ""))
# Total number of digits displayed. Last digit rounded off.
result <- format(23.123456789, digits = 7)
print(result)
result <- format(c(623.2334, 131.14521), scientific = TRUE)
print(result)
result <- format(23.47, nsmall = 4)
print(result)
result <- format(23.47, nsmall = 5)
print(result)
result <- format(6)
print(result)
result <- format("Sri Ramakrishna", width = 20)
print(result)
result<-format("12345",width=10)
print(result)
# Left justify strings.
result <- format("Hello", width = 8, justify = "l")
print(result)
result <- format("Hello", width = 8, justify = "r")
print(result)
# Justfy string with center.
result <- format("Hello", width = 8, justify = "c")
print(result)
result <- nchar("hello  how are you")
print(result)
result <- toupper("Changing To Upper")
print(result)
result <- tolower("Changing To Lower")
print(result)
result <- substring("Extract", 2, 6)
print(result)
result<-substring("hello how are you",1,5)
print(result)
result<-substring("hello how are you",7,9)
print(result)
a<-c(1,2,3)
print(a)
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
print(list_data[3])
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3))
print(list_data)
# Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list")
# Show the list.
print(list_data)
print(list_data[1])
print(list_data[3])
print(list_data$A_Matrix)
print(list_data$A_Matrix)
print(list_data$`1st Quarter`)
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3))
# Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list","String1")
# Add element at the end of the list.
list_data[4] <- "New element"
print(list_data[4])
print(list_data)
print(list_data$String1)
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list","String1")
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3))
# Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list","String1")
# Add element at the end of the list.
list_data[4] <- "New element"
list_data[4] <- "New element"
print(list_data[4])
print(list_data)
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list","String1")
print(list_data$String1)
list_data[4] <- NULL
# Print the 4th Element.
print(list_data)
list_data[3] <- list(list("green",12.3,"updated element"))
print(list_data[3])
print(list_data)
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3),c("Apr","May","Jun"))
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list","2nd Quarter")
print(list_data)
list1 <- list(1,2,3)
list2 <- list("Sun","Mon","Tue")
merged.list <- c(list1,list2)
list3<-c(list1,list2)
print(list3)
list1<-list(1,2,3)
list2<-list(3,4,5)
list3<-list1+list2
print(list3)
list1<-list(1,2,3)
list2<-list(3,4,5)
list3<-list1+list2
print(list3)
list1<-list(1,2,3)
list2<-list(3,4,5)
list4<-list1+list2
print(list4)
vector1<-c(1,2,3)
vector2<-c(3,4,5)
vector3<-vector1+vector2
print(vector3)
list1 <- list(1:5)
print(list1)
list2 <-list(10:14)
print(list2)
#list elements cannot be applied arthimetical operations
print(list1+list2)
v1 <- unlist(list1)
v2 <- unlist(list2)
print(v1)
print(v2)
result <- v1+v2
print(result)
name.age<-data.frame(name=c("Govind","Kumar","Sasi"), age=c(32,30,30))
print(name.age)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)
# Create the data frame.
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Get the structure of the data frame.
str(emp.data)
print(summary(emp.data))
result <- data.frame(emp.data$emp_name,emp.data$salary)
print(result)
result <- data.frame(emp.data$emp.name,emp.data$salary,emp.data$emp_id)
print(result)
result1 <- data.frame(emp.data$emp.name,emp.data$salary,emp.data$emp_id)
print(result1)
result1 <- data.frame(emp.data$emp.name,emp.data$salary)
print(result1)
result <- data.frame(emp.data$emp_name,emp.data$salary)
print(result)
result1 <- data.frame(emp.data$emp_name,emp.data$salary)
print(result1)
result1 <- data.frame(emp.data$emp_name,emp.data$salary,emp.data$emp_id)
print(result1)
result<-emp.data[1:2,1:2]
print(result)
result<-emp.data[,1:2]
print(result)
result<-emp.data[2:3,1:3]
print(result)
result<-emp.data[2,]
print(result)
result<-emp.data[,3]
print(result)
result <- emp.data[c(3,5),c(2,4)]
print(result)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Add the "dept" coulmn.
emp.data$dept <- c("IT","Operations","IT","HR","Finance")
v <- emp.data
print(v)
str(v)
summary(v)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
dept = c("IT","Operations","IT","HR","Finance"),
stringsAsFactors = FALSE
)
# Create the second data frame
emp.newdata <- 	data.frame(
emp_id = c (6:8),
emp_name = c("Rasmi","Pranab","Tusar"),
salary = c(578.0,722.5,632.8),
start_date = as.Date(c("2013-05-21","2013-07-30","2014-06-17")),
dept = c("IT","Operations","Fianance"),
stringsAsFactors = FALSE
)
# Bind the two data frames.
emp.finaldata <- rbind(emp.data,emp.newdata)
print(emp.finaldata)
print(seq(32,44))
print(sum(41:68))
print(mean(25:82))
print(max(c(12,25,13,8)))
new.function <- function(a) {
for(i in 1:a) {
b <- i^2
print(paste(i,b))
}
}
new.function(8)
new.function <- function() {
for(i in 1:5) {
print(i^2)
}
}
#---------------------------------------
# Call the function without supplying an argument.
#----------------------------------------------
new.function()
new.function <- function(a,b,c) {
result <- a * b + c
print(result)
}
# Call the function by position of arguments.
new.function(5,11,3)
new.function(5,3,11)
new.function(a = 5, c = 3, b =11)
new.function <- function(a = 3, b = 6) {
result <- a * b
print(result)
}
# Call the function without giving any argument.
new.function()
new.function(9,5)
new.function <- function(a, b=2) {
print(a^2)
print(a)
print(b)
}
# Evaluate the function without supplying one of the arguments.
new.function(6)
new.function(5,3)
setwd("e:/MCA/unit II/")
# Creating a data frame
df = data.frame(
"ID" = c(1, 2, 3, 4),
"Name" = c("Tony", "Thor", "Loki", "Hulk"),
"Age" = c(20, 34, 24, 40),
"Pin" = c(756083, 756001, 751003, 110011)
)
con = file("myfile.dat", "wb")
writeBin(colnames(df), con)
# Write the records in each of the columns to the file
writeBin(c(df$ID, df$Name, df$Age, df$Pin), con)
# Close the connection object
close(con)
con = file("myfile.dat", "rb")
# Read the column names
# n = 4 as here 4 column
colname = readBin(con, character(),  n = 4)
colname
con = file("myfile.dat", "rb")
bindata = readBin(con, integer(), n = 20)
bindata
ID = bindata[5:8]
ID
Name = bindata[9:12]
# 13 to 16 byte for values of the age column
Age = bindata[13:16]
PinCode = bindata[17:20]
finaldata = cbind(ID, Name, Age, PinCode)
colnames(finaldata)= colname
print(finaldata)
newdata = file("https://stats.idre.ucla.edu/stat/r/faq/bindata.dat", "rb")
varnames = readBin(newdata, character(), n=3)
varnames
datavals = readBin(newdata, integer(), size = 4, n = 600, endian = "little")
readvals = datavals[1:200]
writevals = datavals[201:400]
mathvals = datavals[401:600]
rdata = cbind(readvals, writevals, mathvals)
colnames(rdata) = varnames
rdata[1:5,]
to.read = file("https://stats.idre.ucla.edu/stat/r/faq/bintest.dat", "rb")
readBin(to.read, integer(), endian = "little")
readBin(to.read, integer(), n = 4, endian = "little")
readBin(to.read, integer(), n = 2, size = 4, endian = "little")
setwd("e:/MCA/unit II")
library(XML)
library(RCurl)
library(stringr)
library(plyr)
install.packages("RCurl")
install.packages("stringr")
install.packages("plyr")
setwd("e:/MCA/unit II")
library(XML)
library(RCurl)
library(stringr)
library(plyr)
url <- "https://www.omegahat.net"
links <- getHTMLLinks(url)
print(links)
install.packages("RCurl")
install.packages("XML")
install.packages("XML")
install.packages("RCurl")
